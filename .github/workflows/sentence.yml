name: Generate Sentence Level Transcription

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths: 
      - 'Visuals/**'
      - 'Trans/**'

permissions:
  contents: write

jobs:
  generate-transcription:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Process transcription files with sequential matching
        run: |
          python3 << 'EOF'
          import json
          import os
          import re
          from datetime import datetime

          def clean_word(word):
              return re.sub(r'[^\w\s]', '', word.lower().strip())

          def find_sentence_span(sentence_words, word_segments, start_idx):
              current_idx = start_idx
              first_match = None
              last_match = None
              for sentence_word in sentence_words:
                  target = clean_word(sentence_word)
                  found = False
                  for idx in range(current_idx, len(word_segments)):
                      seg_word = clean_word(word_segments[idx]['word'])
                      if seg_word == target:
                          if first_match is None:
                              first_match = idx
                          last_match = idx
                          current_idx = idx + 1  # advance for next word
                          found = True
                          break
                  if not found:
                      continue  # skip missing word
              if first_match is not None and last_match is not None:
                  return first_match, last_match, last_match + 1
              else:
                  return -1, -1, current_idx

          def main():
              with open('Visuals/visuals.json', 'r', encoding='utf-8') as f:
                  visuals = json.load(f)
              with open('Trans/transcription.json', 'r', encoding='utf-8') as f:
                  transcription = json.load(f)
              word_segments = transcription.get('word_segments', [])

              results = []
              current_start_idx = 0

              for item in visuals:
                  sentence = item['sentence']
                  number = item['number']
                  words = [w for w in sentence.split() if clean_word(w)]
                  if not words:
                      continue

                  s_idx, e_idx, next_idx = find_sentence_span(words, word_segments, current_start_idx)
                  if s_idx >= 0 and e_idx >= 0:
                      start_time = word_segments[s_idx]['start']
                      end_time = word_segments[e_idx]['end']
                      duration = round(end_time - start_time, 3)
                      results.append({
                          "id": f"i{number}",
                          "number": number,
                          "sentence": sentence,
                          "start": start_time,
                          "end": end_time,
                          "duration": duration
                      })
                      print(f"✓ {number}: {start_time}-{end_time} ({duration}s)")
                      current_start_idx = next_idx
                  else:
                      print(f"✗ Could not match sentence {number}")

              os.makedirs('Edits', exist_ok=True)
              output = {
                  "metadata": {
                      "created_at": datetime.utcnow().isoformat() + "Z",
                      "total_sentences": len(results),
                      "source_files": {
                          "visuals": "Visuals/visuals.json",
                          "transcription": "Trans/transcription.json"
                      }
                  },
                  "sentence_transcriptions": results
              }
              with open('Edits/edit.json', 'w', encoding='utf-8') as f:
                  json.dump(output, f, indent=2, ensure_ascii=False)
              print(f"✅ Saved Edits/edit.json with {len(results)} sentences")

          if __name__ == "__main__":
              main()
          EOF
          
      - name: Set up Git identity
        run: |
          git config --global user.name "intellectra9"
          git config --global user.email "intellectra9@outlook.com"
          
      - name: Commit and push transcription file
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git stash --include-untracked
          git pull origin main --rebase || echo "Warning: rebase skipped"
          git stash pop || true

          git add Edits/edit.json
          timestamp=$(TZ="Asia/Kolkata" date +"%Y-%m-%d %H:%M:%S IST")
          git commit -m "Generated sentence transcription: ${timestamp}" || echo "No changes to commit"
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git HEAD:main
