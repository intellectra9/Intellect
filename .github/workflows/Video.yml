name: Generate Smooth Video

on:
  workflow_dispatch:

permissions:
  contents: write  # Allows pushing changes back

jobs:
  generate-video:
    runs-on: ubuntu-latest

    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v3  

      - name: Set up Python  
        uses: actions/setup-python@v5  
        with:  
          python-version: '3.10'  

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies  
        run: |  
          pip install requests pillow

      - name: Create seamless video generation script
        run: |
          cat > generate_video.py << 'EOF'
          import os  
          import json  
          import subprocess
          import sys
          from PIL import Image
          import tempfile
          import shutil

          # === Config ===  
          AUDIO_FILE = "Audio/a1.mp3"
          EDIT_JSON = "Edits/edit.json"
          IMAGES_DIR = "Images"
          OUTPUT_DIR = "Video"
          OUTPUT_FILE = "final_video.mp4"
          TEMP_DIR = "temp_video_generation"

          # Create necessary directories
          os.makedirs(OUTPUT_DIR, exist_ok=True)
          os.makedirs(TEMP_DIR, exist_ok=True)

          print("🎬 Starting seamless video generation process...")

          # === Validate required files ===
          required_files = [AUDIO_FILE, EDIT_JSON]
          for file_path in required_files:
              if not os.path.exists(file_path):
                  print(f"❌ Required file not found: {file_path}")
                  sys.exit(1)

          if not os.path.exists(IMAGES_DIR):
              print(f"❌ Images directory not found: {IMAGES_DIR}")
              sys.exit(1)

          print("✅ All required files and directories found")

          # === Load edit.json ===
          with open(EDIT_JSON, "r") as f:
              edit_data = json.load(f)

          sentence_transcriptions = edit_data.get("sentence_transcriptions", [])
          if not sentence_transcriptions:
              print("❌ No sentence transcriptions found in edit.json")
              sys.exit(1)

          print(f"📝 Found {len(sentence_transcriptions)} sentence transcriptions")

          # === Process images and validate segments ===
          valid_segments = []
          missing_images = []

          for i, segment in enumerate(sentence_transcriptions):
              segment_id = segment.get("id", f"i{i+1}")
              start_time = segment.get("start", 0)
              end_time = segment.get("end", 0)
              duration = end_time - start_time

              if duration <= 0:
                  print(f"⚠️ Skipping segment {segment_id} with invalid duration: {duration}")
                  continue

              # Find corresponding image
              image_filename = f"{segment_id}.png"
              image_path = os.path.join(IMAGES_DIR, image_filename)

              if not os.path.exists(image_path):
                  missing_images.append(image_filename)
                  print(f"⚠️ Image not found: {image_path}")
                  continue

              print(f"🖼️ Processing segment {segment_id}: {start_time}s - {end_time}s ({duration:.2f}s)")

              # Process image to standard dimensions
              try:
                  with Image.open(image_path) as img:
                      # Convert to RGB if necessary
                      if img.mode != 'RGB':
                          img = img.convert('RGB')
                      
                      # Resize maintaining aspect ratio
                      img.thumbnail((1920, 1080), Image.Resampling.LANCZOS)
                      
                      # Create new image with black background
                      new_img = Image.new('RGB', (1920, 1080), (0, 0, 0))
                      
                      # Center the image
                      x = (1920 - img.width) // 2
                      y = (1080 - img.height) // 2
                      new_img.paste(img, (x, y))
                      
                      # Save processed image
                      processed_image_path = os.path.join(TEMP_DIR, f"processed_{segment_id}.png")
                      new_img.save(processed_image_path)

                  valid_segments.append({
                      "id": segment_id,
                      "image_path": processed_image_path,
                      "start": start_time,
                      "end": end_time,
                      "duration": duration
                  })

              except Exception as e:
                  print(f"❌ Error processing image {image_path}: {e}")
                  missing_images.append(image_filename)

          if missing_images:
              print(f"⚠️ Missing images: {', '.join(missing_images)}")

          if not valid_segments:
              print("❌ No valid video segments found")
              sys.exit(1)

          # Sort segments by start time
          valid_segments.sort(key=lambda x: x["start"])
          print(f"✅ Processed {len(valid_segments)} video segments")

          # === Get total audio duration ===
          print("🔍 Getting audio duration...")
          try:
              duration_cmd = [
                  "ffprobe", "-v", "quiet", "-show_entries", "format=duration", 
                  "-of", "csv=p=0", AUDIO_FILE
              ]
              result = subprocess.run(duration_cmd, capture_output=True, text=True, check=True)
              total_duration = float(result.stdout.strip())
              print(f"📊 Total audio duration: {total_duration:.2f} seconds")
          except Exception as e:
              print(f"❌ Error getting audio duration: {e}")
              total_duration = max(seg["end"] for seg in valid_segments)
              print(f"📊 Using fallback duration: {total_duration:.2f} seconds")

          # === Create seamless timing plan ===
          print("🔧 Creating seamless timing plan...")

          # Extend segments to fill gaps and ensure smooth transitions
          seamless_segments = []
          for i, segment in enumerate(valid_segments):
              # Start time remains the same
              segment_start = segment["start"]
              
              # End time: extend to next segment's start, or to total duration if last
              if i < len(valid_segments) - 1:
                  segment_end = valid_segments[i + 1]["start"]
              else:
                  segment_end = total_duration
              
              # Handle first segment - it should start from 0 if there's a gap
              if i == 0 and segment_start > 0:
                  segment_start = 0
              
              seamless_segments.append({
                  "id": segment["id"],
                  "image_path": segment["image_path"],
                  "start": segment_start,
                  "end": segment_end,
                  "duration": segment_end - segment_start
              })
              
              print(f"📍 Seamless segment {segment['id']}: {segment_start:.2f}s - {segment_end:.2f}s")

          # === Generate video with seamless transitions ===
          print("🎥 Creating seamless video...")

          output_path = os.path.join(OUTPUT_DIR, OUTPUT_FILE)

          # Build FFmpeg command for seamless video using overlay method
          input_args = ["-i", AUDIO_FILE]
          overlay_filter = []

          # Add images as inputs
          for i, segment in enumerate(seamless_segments):
              input_args.extend(["-loop", "1", "-i", segment["image_path"]])

          # Scale all images
          for i in range(len(seamless_segments)):
              overlay_filter.append(
                  f"[{i+1}:v]scale=1920:1080:force_original_aspect_ratio=decrease,"
                  f"pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=30[img{i}];"
              )

          # Create base black video
          overlay_filter.append(f"color=black:size=1920x1080:duration={total_duration}:rate=30[base];")

          # Build overlay chain with seamless timing
          current_stream = "[base]"
          for i, segment in enumerate(seamless_segments):
              next_stream = f"[overlay{i}]" if i < len(seamless_segments) - 1 else "[final]"
              
              # Each image shows for its full seamless duration
              overlay_filter.append(
                  f"{current_stream}[img{i}]overlay=0:0:enable='between(t,{segment['start']},{segment['end']})'{next_stream};"
              )
              current_stream = next_stream

          overlay_filter_str = "".join(overlay_filter)

          # Build complete FFmpeg command
          ffmpeg_cmd = [
              "ffmpeg", "-y"
          ] + input_args + [
              "-filter_complex", overlay_filter_str,
              "-map", "[final]",
              "-map", "0:a",
              "-c:v", "libx264",
              "-preset", "medium",
              "-crf", "23",
              "-c:a", "aac",
              "-b:a", "192k",
              "-pix_fmt", "yuv420p",
              "-t", str(total_duration),
              output_path
          ]

          print("🔧 Running seamless FFmpeg generation...")
          print(f"Command preview: ffmpeg -y -i {AUDIO_FILE} [+{len(seamless_segments)} image inputs]")

          try:
              result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True, check=True)
              print("✅ Seamless video generation completed successfully!")
              print(f"📁 Output saved to: {output_path}")
              
              # Print file info
              if os.path.exists(output_path):
                  file_size = os.path.getsize(output_path)
                  print(f"📊 File size: {file_size / (1024*1024):.2f} MB")
                  
                  # Verify output duration
                  verify_cmd = [
                      "ffprobe", "-v", "quiet", "-show_entries", "format=duration", 
                      "-of", "csv=p=0", output_path
                  ]
                  try:
                      verify_result = subprocess.run(verify_cmd, capture_output=True, text=True, check=True)
                      output_duration = float(verify_result.stdout.strip())
                      print(f"📊 Output duration: {output_duration:.2f} seconds")
                  except:
                      print("📊 Could not verify output duration")
              else:
                  print("❌ Output file was not created")
                  
          except subprocess.CalledProcessError as e:
              print(f"❌ FFmpeg error: {e}")
              print(f"stderr: {e.stderr}")
              
              # Try alternative concat method
              print("🔄 Trying concat method as fallback...")
              
              try:
                  # Create video segments with precise timing
                  segment_files = []
                  for i, segment in enumerate(seamless_segments):
                      segment_output = os.path.join(TEMP_DIR, f"segment_{i}.mp4")
                      segment_duration = segment["duration"]
                      
                      # Create individual segment
                      segment_cmd = [
                          "ffmpeg", "-y",
                          "-loop", "1", "-i", segment["image_path"],
                          "-t", str(segment_duration),
                          "-c:v", "libx264",
                          "-preset", "fast",
                          "-crf", "23",
                          "-vf", "scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=30",
                          "-pix_fmt", "yuv420p",
                          segment_output
                      ]
                      
                      subprocess.run(segment_cmd, capture_output=True, text=True, check=True)
                      segment_files.append(segment_output)
                      print(f"✅ Created segment {i+1}/{len(seamless_segments)}")
                  
                  # Create concat file
                  concat_file = os.path.join(TEMP_DIR, "concat_list.txt")
                  with open(concat_file, "w") as f:
                      for segment_file in segment_files:
                          f.write(f"file '{segment_file}'\n")
                  
                  # Concatenate segments and add audio
                  concat_cmd = [
                      "ffmpeg", "-y",
                      "-f", "concat",
                      "-safe", "0",
                      "-i", concat_file,
                      "-i", AUDIO_FILE,
                      "-c:v", "copy",
                      "-c:a", "aac",
                      "-b:a", "192k",
                      "-t", str(total_duration),
                      output_path
                  ]
                  
                  subprocess.run(concat_cmd, capture_output=True, text=True, check=True)
                  print("✅ Concat fallback method completed successfully!")
                  
              except subprocess.CalledProcessError as e2:
                  print(f"❌ Concat fallback failed: {e2}")
                  print(f"stderr: {e2.stderr}")
                  sys.exit(1)

          # === Cleanup ===
          shutil.rmtree(TEMP_DIR, ignore_errors=True)

          print("🎉 Seamless video generation completed!")
          print("✨ No more black screen transitions!")
          print("🔄 Images flow seamlessly from one to the next!")
          print("📺 Perfect audio-visual synchronization achieved!")
          EOF

      - name: Run seamless video generation
        run: python3 generate_video.py

      - name: Verify video output
        run: |
          if [ -f "Video/final_video.mp4" ]; then
            echo "✅ Video file created successfully"
            ls -lh Video/final_video.mp4
            
            # Check video properties
            ffprobe -v quiet -print_format json -show_format -show_streams Video/final_video.mp4 | jq '.format.duration, .streams[0].width, .streams[0].height' 2>/dev/null || echo "Video properties check completed"
          else
            echo "❌ Video file not found!"
            exit 1
          fi

      - name: Configure Git  
        run: |  
          git config --global user.name "intellect9"  
          git config --global user.email "intellectra9@outlook.com"  

      - name: Commit and push seamless video  
        env:  
          GH_PAT: ${{ secrets.GH_PAT }}  
        run: |  
          git stash --include-untracked  
          git pull origin main --rebase || echo "No rebase needed"  
          git stash pop || true  

          git add Video/  
          timestamp=$(TZ="Asia/Kolkata" date +"%Y-%m-%d %H:%M:%S IST")  
          git commit -m "🎬 Generated seamless video (no black transitions): ${timestamp}" || echo "No changes to commit"  

          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git  
          git push origin HEAD:main

      - name: Video generation summary
        run: |
          echo "🎯 Video Generation Summary:"
          echo "================================"
          echo "✅ Seamless transitions implemented"
          echo "✅ No black screen gaps"
          echo "✅ Images extended to fill timeline"
          echo "✅ Audio-visual synchronization"
          echo "✅ Fallback methods for reliability"
          echo "================================"
          echo "🎬 Your smooth video is ready!"
