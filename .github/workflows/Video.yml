name: Generate Video

on:
  workflow_dispatch:

permissions:
  contents: write  # Needed to push back to repo

jobs:
  generate_video:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Generate final video using FFmpeg
        run: |
          python3 - <<EOF
          import os
          import json
          import subprocess

          # === CONFIG ===
          AUDIO_FILE = "Intellect/Audio/a1.mp3"
          EDIT_JSON = "Edits/edit.json"
          IMAGES_DIR = "Images"
          OUTPUT_VIDEO = "Video/final_video.mp4"

          # Load edits
          with open(EDIT_JSON, "r") as f:
              edits = json.load(f)["sentence_transcriptions"]

          # === INPUTS ===
          inputs = []
          # Create a base black screen with total duration
          TOTAL_DURATION = edits[-1]["end"] + 5  # small buffer
          inputs.append(f"-f lavfi -t {TOTAL_DURATION} -i color=c=black:s=1280x720")

          # Audio
          inputs.append(f"-i {AUDIO_FILE}")

          # Images
          for item in edits:
              img_id = item["id"]
              img_file = os.path.join(IMAGES_DIR, f"{img_id}.png")
              if os.path.exists(img_file):
                  inputs.append(f"-loop 1 -i {img_file}")
              else:
                  print(f"⚠️ Skipping missing image: {img_file}")

          # === FILTER COMPLEX ===
          filter_complex = ""
          last = "[0:v]"  # base black video
          for idx, item in enumerate(edits):
              img_id = item["id"]
              img_file = os.path.join(IMAGES_DIR, f"{img_id}.png")
              if not os.path.exists(img_file):
                  continue  # skip missing

              start = item["start"]
              end = item["end"]
              input_idx = idx + 2  # [0] base, [1] audio, [2:] images

              # Enable overlay between start & end
              overlay = (
                  f"{last}[{input_idx}:v] overlay=enable='between(t,{start},{end})'[tmp{idx}];"
              )
              filter_complex += overlay
              last = f"[tmp{idx}]"

          # Remove trailing ';'
          if filter_complex.endswith(';'):
              filter_complex = filter_complex[:-1]

          # === FULL COMMAND ===
          ffmpeg_cmd = [
              "ffmpeg",
              *sum([part.split() for part in inputs], []),
              "-filter_complex", filter_complex,
              "-map", last,
              "-map", "1:a",
              "-c:v", "libx264",
              "-c:a", "aac",
              "-shortest",
              OUTPUT_VIDEO
          ]

          print("📼 Running FFmpeg command:")
          print(" ".join(ffmpeg_cmd))

          subprocess.run(ffmpeg_cmd, check=True)
          print(f"✅ Video created at: {OUTPUT_VIDEO}")
          EOF

      - name: Configure Git
        run: |
          git config --global user.name "intellect9"
          git config --global user.email "intellectra9@outlook.com"

      - name: Commit and push final video
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git stash --include-untracked
          git pull origin main --rebase || echo "No rebase needed"
          git stash pop || true

          git add Video/
          timestamp=$(TZ="Asia/Kolkata" date +"%Y-%m-%d %H:%M:%S IST")
          git commit -m "🎬 Generated final video: ${timestamp}" || echo "No changes to commit"

          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git
          git push origin HEAD:main
