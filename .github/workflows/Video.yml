name: Generate Video

on:
  workflow_dispatch:

permissions:
  contents: write  # Allows pushing changes back

jobs:
  generate-video:
    runs-on: ubuntu-latest

    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v3  

      - name: Set up Python  
        uses: actions/setup-python@v5  
        with:  
          python-version: '3.10'  

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies  
        run: |  
          pip install requests pillow

      - name: Create Python script
        run: |
          cat > generate_video.py << 'EOF'
          import os  
          import json  
          import subprocess
          import sys
          from PIL import Image
          import tempfile
          import shutil

          # === Config ===  
          AUDIO_FILE = "Audio/a1.mp3"
          EDIT_JSON = "Edits/edit.json"
          IMAGES_DIR = "Images"
          OUTPUT_DIR = "Video"
          OUTPUT_FILE = "final_video.mp4"
          TEMP_DIR = "temp_video_generation"

          # Create necessary directories
          os.makedirs(OUTPUT_DIR, exist_ok=True)
          os.makedirs(TEMP_DIR, exist_ok=True)

          print("🎬 Starting smooth video generation process...")

          # === Validate required files ===
          required_files = [AUDIO_FILE, EDIT_JSON]
          for file_path in required_files:
              if not os.path.exists(file_path):
                  print(f"❌ Required file not found: {file_path}")
                  sys.exit(1)

          if not os.path.exists(IMAGES_DIR):
              print(f"❌ Images directory not found: {IMAGES_DIR}")
              sys.exit(1)

          print("✅ All required files and directories found")

          # === Load edit.json ===
          with open(EDIT_JSON, "r") as f:
              edit_data = json.load(f)

          sentence_transcriptions = edit_data.get("sentence_transcriptions", [])
          if not sentence_transcriptions:
              print("❌ No sentence transcriptions found in edit.json")
              sys.exit(1)

          print(f"📝 Found {len(sentence_transcriptions)} sentence transcriptions")

          # === Process images and validate segments ===
          valid_segments = []
          missing_images = []

          for i, segment in enumerate(sentence_transcriptions):
              segment_id = segment.get("id", f"i{i+1}")
              start_time = segment.get("start", 0)
              end_time = segment.get("end", 0)
              duration = end_time - start_time

              if duration <= 0:
                  print(f"⚠️ Skipping segment {segment_id} with invalid duration: {duration}")
                  continue

              # Find corresponding image
              image_filename = f"{segment_id}.png"
              image_path = os.path.join(IMAGES_DIR, image_filename)

              if not os.path.exists(image_path):
                  missing_images.append(image_filename)
                  print(f"⚠️ Image not found: {image_path}")
                  continue

              print(f"🖼️ Processing segment {segment_id}: {start_time}s - {end_time}s ({duration:.2f}s)")

              # Process image to standard dimensions
              try:
                  with Image.open(image_path) as img:
                      # Convert to RGB if necessary
                      if img.mode != 'RGB':
                          img = img.convert('RGB')
                      
                      # Resize to 1920x1080 maintaining aspect ratio
                      img.thumbnail((1920, 1080), Image.Resampling.LANCZOS)
                      
                      # Create new image with black background
                      new_img = Image.new('RGB', (1920, 1080), (0, 0, 0))
                      
                      # Center the image
                      x = (1920 - img.width) // 2
                      y = (1080 - img.height) // 2
                      new_img.paste(img, (x, y))
                      
                      # Save processed image
                      processed_image_path = os.path.join(TEMP_DIR, f"processed_{segment_id}.png")
                      new_img.save(processed_image_path)

                  valid_segments.append({
                      "id": segment_id,
                      "image_path": processed_image_path,
                      "start": start_time,
                      "end": end_time,
                      "duration": duration
                  })

              except Exception as e:
                  print(f"❌ Error processing image {image_path}: {e}")
                  missing_images.append(image_filename)

          if missing_images:
              print(f"⚠️ Missing images: {', '.join(missing_images)}")

          if not valid_segments:
              print("❌ No valid video segments found")
              sys.exit(1)

          # Sort segments by start time to ensure proper order
          valid_segments.sort(key=lambda x: x["start"])
          print(f"✅ Processed {len(valid_segments)} video segments")

          # === Get total audio duration ===
          print("🔍 Getting audio duration...")
          try:
              duration_cmd = [
                  "ffprobe", "-v", "quiet", "-show_entries", "format=duration", 
                  "-of", "csv=p=0", AUDIO_FILE
              ]
              result = subprocess.run(duration_cmd, capture_output=True, text=True, check=True)
              total_duration = float(result.stdout.strip())
              print(f"📊 Total audio duration: {total_duration:.2f} seconds")
          except Exception as e:
              print(f"❌ Error getting audio duration: {e}")
              # Use last segment end time as fallback
              total_duration = max(seg["end"] for seg in valid_segments)
              print(f"📊 Using fallback duration: {total_duration:.2f} seconds")

          # === Create smooth video with proper timing synchronization ===
          print("🎥 Creating video with properly synchronized visuals...")
          
          output_path = os.path.join(OUTPUT_DIR, OUTPUT_FILE)
          
          # Build FFmpeg filter complex for time-based transitions
          filter_parts = []
          input_args = ["-i", AUDIO_FILE]  # Audio input first
          
          # Add all images as inputs
          for i, segment in enumerate(valid_segments):
              input_args.extend(["-loop", "1", "-i", segment["image_path"]])
          
          # Create base video streams from images
          for i, segment in enumerate(valid_segments):
              input_idx = i + 1  # +1 because audio is input 0
              
              # Create properly scaled video stream
              filter_parts.append(
                  f"[{input_idx}:v]scale=1920:1080:force_original_aspect_ratio=decrease,"
                  f"pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=30,format=yuv420p[img{i}];"
              )
          
          # Create timeline-based video using overlay filters with seamless transitions
          # Start with the first image as background (extended to cover gaps)
          filter_parts.append(f"color=black:size=1920x1080:duration={total_duration}:rate=30[bg];")
          
          # Build overlay chain - each image stays visible until next image starts
          current_stream = "[bg]"
          for i, segment in enumerate(valid_segments):
              next_stream = f"[tmp{i}]" if i < len(valid_segments) - 1 else "[video]"
              
              # Calculate when this image should stop showing
              # It should show until the next image starts, not just until its end time
              next_start = valid_segments[i + 1]["start"] if i < len(valid_segments) - 1 else total_duration
              
              # Use overlay filter with extended timing to fill gaps
              filter_parts.append(
                  f"{current_stream}[img{i}]overlay=0:0:enable='gte(t,{segment['start']})*lt(t,{next_start})'{next_stream};"
              )
              current_stream = next_stream
          
          # Combine all filter parts
          filter_complex = "".join(filter_parts)
          
          # Build FFmpeg command for synchronized video generation
          ffmpeg_cmd = [
              "ffmpeg", "-y"
          ] + input_args + [
              "-filter_complex", filter_complex,
              "-map", "[video]",  # Use processed video
              "-map", "0:a",      # Use original audio (input 0)
              "-c:v", "libx264",
              "-preset", "medium",
              "-crf", "23",
              "-c:a", "aac",
              "-b:a", "192k",
              "-pix_fmt", "yuv420p",
              "-t", str(total_duration),  # Ensure video matches audio duration
              output_path
          ]
          
          print("🔧 Running FFmpeg command...")
          print(f"Command: {' '.join(ffmpeg_cmd[:10])}... (truncated)")
          
          try:
              result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True, check=True)
              print("✅ Smooth video generation completed successfully!")
              print(f"📁 Output saved to: {output_path}")
              
              # Print file size
              if os.path.exists(output_path):
                  file_size = os.path.getsize(output_path)
                  print(f"📊 File size: {file_size / (1024*1024):.2f} MB")
              else:
                  print("❌ Output file was not created")
                  
          except subprocess.CalledProcessError as e:
              print(f"❌ FFmpeg error: {e}")
              print(f"stdout: {e.stdout}")
              print(f"stderr: {e.stderr}")
              
              # Try alternative approach with precise timing
              print("🔄 Trying alternative method with precise timing...")
              
              # Method 2: Create video segments with exact timing using presentation timestamps
              try:
                  # Create filter complex with proper timing
                  alt_filter_parts = []
                  alt_inputs = ["-i", AUDIO_FILE]
                  
                  # Add images as inputs
                  for i, segment in enumerate(valid_segments):
                      alt_inputs.extend(["-loop", "1", "-i", segment["image_path"]])
                  
                  # Create scaled image streams
                  for i, segment in enumerate(valid_segments):
                      alt_filter_parts.append(
                          f"[{i+1}:v]scale=1920:1080:force_original_aspect_ratio=decrease,"
                          f"pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=30[s{i}];"
                      )
                  
                  # Create black background
                  alt_filter_parts.append(f"color=black:size=1920x1080:duration={total_duration}:rate=30[base];")
                  
                  # Create overlay sequence with seamless transitions
                  current = "[base]"
                  for i, segment in enumerate(valid_segments):
                      next_stream = f"[o{i}]" if i < len(valid_segments) - 1 else "[final]"
                      
                      # Calculate when this image should stop (when next image starts)
                      next_start = valid_segments[i + 1]["start"] if i < len(valid_segments) - 1 else total_duration
                      
                      # Each image shows from its start until the next image starts
                      alt_filter_parts.append(
                          f"{current}[s{i}]overlay=enable='gte(t,{segment['start']})*lt(t,{next_start})'{next_stream};"
                      )
                      current = next_stream
                  
                  alt_filter_complex = "".join(alt_filter_parts)
                  
                  alt_cmd = [
                      "ffmpeg", "-y"
                  ] + alt_inputs + [
                      "-filter_complex", alt_filter_complex,
                      "-map", "[final]",
                      "-map", "0:a",
                      "-c:v", "libx264",
                      "-preset", "fast",
                      "-crf", "23",
                      "-c:a", "aac",
                      "-b:a", "192k",
                      "-t", str(total_duration),
                      output_path
                  ]
                  
                  result = subprocess.run(alt_cmd, capture_output=True, text=True, check=True)
                  print("✅ Alternative timing method completed successfully!")
                  
              except subprocess.CalledProcessError as e3:
                  print(f"❌ Alternative timing method failed: {e3}")
                  
                  # Method 3: Create a seamless video with proper image persistence
                  print("🔄 Trying seamless transition method...")
                  try:
                      # Create a more sophisticated approach using timeline
                      timeline_inputs = ["-i", AUDIO_FILE]
                      timeline_filter = []
                      
                      # Add all images as inputs
                      for i, segment in enumerate(valid_segments):
                          timeline_inputs.extend(["-loop", "1", "-i", segment["image_path"]])
                      
                      # Scale all images
                      for i in range(len(valid_segments)):
                          timeline_filter.append(
                              f"[{i+1}:v]scale=1920:1080:force_original_aspect_ratio=decrease,"
                              f"pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=30[img{i}];"
                          )
                      
                      # Create a base timeline and build seamless transitions
                      timeline_filter.append(f"color=black:size=1920x1080:duration={total_duration}:rate=30[base];")
                      
                      # Build the transition logic
                      current_stream = "[base]"
                      for i, segment in enumerate(valid_segments):
                          next_stream = f"[layer{i}]" if i < len(valid_segments) - 1 else "[seamless]"
                          
                          # Each image appears at its start time and stays until next image starts
                          if i < len(valid_segments) - 1:
                              next_start = valid_segments[i + 1]["start"]
                              enable_condition = f"gte(t,{segment['start']})*lt(t,{next_start})"
                          else:
                              # Last image stays until the end
                              enable_condition = f"gte(t,{segment['start']})"
                          
                          timeline_filter.append(
                              f"{current_stream}[img{i}]overlay=0:0:enable='{enable_condition}'{next_stream};"
                          )
                          current_stream = next_stream
                      
                      timeline_filter_str = "".join(timeline_filter)
                      
                      seamless_cmd = [
                          "ffmpeg", "-y"
                      ] + timeline_inputs + [
                          "-filter_complex", timeline_filter_str,
                          "-map", "[seamless]",
                          "-map", "0:a",
                          "-c:v", "libx264",
                          "-preset", "medium",
                          "-crf", "23",
                          "-c:a", "aac",
                          "-b:a", "192k",
                          "-t", str(total_duration),
                          output_path
                      ]
                      
                      result = subprocess.run(seamless_cmd, capture_output=True, text=True, check=True)
                      print("✅ Seamless transition method completed successfully!")
                      
                  except subprocess.CalledProcessError as e5:
                      print(f"❌ Seamless method failed: {e5}")
                      print(f"stderr: {e5.stderr}")
                      sys.exit(1)

          # === Cleanup ===
          shutil.rmtree(TEMP_DIR, ignore_errors=True)
          
          print("🎉 Seamless video generation process completed!")
          print("🔊 Audio flows naturally with perfectly timed visuals!")
          print("📺 Images transition seamlessly without black gaps!")
          print("🎬 Previous image stays visible until next image starts!")
          EOF

      - name: Run video generation script
        run: python3 generate_video.py

      - name: Configure Git  
        run: |  
          git config --global user.name "intellect9"  
          git config --global user.email "intellectra9@outlook.com"  

      - name: Commit and push generated video  
        env:  
          GH_PAT: ${{ secrets.GH_PAT }}  
        run: |  
          git stash --include-untracked  
          git pull origin main --rebase || echo "No rebase needed"  
          git stash pop || true  

          git add Video/  
          timestamp=$(TZ="Asia/Kolkata" date +"%Y-%m-%d %H:%M:%S IST")  
          git commit -m "🎬 Generated smooth video: ${timestamp}" || echo "No changes to commit"  

          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git  
          git push origin HEAD:main
