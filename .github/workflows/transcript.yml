name: Sentence-Level Transcription

on:
  push:
    branches:
      - main

jobs:
  transcribe:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Install ffmpeg (required for Whisper)
      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      # 3) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 4) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/linto-ai/whisper-timestamped torch difflib

      # 5) Run sentence-level transcription and find target phrase
      - name: Transcribe audio and find target sentence timestamps
        run: |
          python -c "
          import os
          import json
          import difflib
          from whisper_timestamped import load_model, transcribe

          # Target sentence to find
          target_sentence = 'going to learn how to make ai images with ideogram'
          
          # Load the Whisper model
          model = load_model('base')

          # Transcribe your TTS audio file
          result = transcribe(model, 'Audio/a1.mp3')

          # Make sure 'Transcript' folder exists
          os.makedirs('Transcript', exist_ok=True)

          # Function to find best matching segment
          def find_matching_segments(segments, target):
              matches = []
              target_lower = target.lower().strip()
              
              for segment in segments:
                  segment_text = segment.get('text', '').lower().strip()
                  
                  # Calculate similarity ratio
                  similarity = difflib.SequenceMatcher(None, target_lower, segment_text).ratio()
                  
                  # Check if target is contained in segment
                  if target_lower in segment_text or similarity > 0.6:
                      matches.append({
                          'segment': segment,
                          'similarity': similarity,
                          'contains_target': target_lower in segment_text
                      })
              
              return sorted(matches, key=lambda x: (x['contains_target'], x['similarity']), reverse=True)

          # Write results to file
          with open('Transcript/t1.txt', 'w', encoding='utf-8') as f:
              f.write('Audio Transcription with Sentence-Level Timestamps\n')
              f.write('=' * 60 + '\n\n')
              
              f.write(f'TARGET SENTENCE: \"{target_sentence}\"\n')
              f.write('-' * 60 + '\n\n')
              
              # Find matching segments
              matches = find_matching_segments(result.get('segments', []), target_sentence)
              
              if matches:
                  f.write('BEST MATCHES:\n')
                  for i, match in enumerate(matches[:3]):  # Show top 3 matches
                      segment = match['segment']
                      f.write(f'\nMatch {i+1} (Similarity: {match[\"similarity\"]:.2f}):\n')
                      f.write(f'Text: \"{segment.get(\"text\", \"\").strip()}\"\n')
                      f.write(f'Time: {segment.get(\"start\", 0):.2f}s - {segment.get(\"end\", 0):.2f}s\n')
                      f.write(f'Duration: {segment.get(\"end\", 0) - segment.get(\"start\", 0):.2f}s\n')
                      if match['contains_target']:
                          f.write('*** EXACT MATCH FOUND ***\n')
              else:
                  f.write('No close matches found for target sentence.\n')
              
              f.write('\n' + '=' * 60 + '\n')
              f.write('ALL SEGMENTS:\n\n')
              
              # Write all segments for reference
              for i, segment in enumerate(result.get('segments', [])):
                  segment_text = segment.get('text', '').strip()
                  start_time = segment.get('start', 0)
                  end_time = segment.get('end', 0)
                  duration = end_time - start_time
                  
                  f.write(f'Segment {i+1}:\n')
                  f.write(f'Text: \"{segment_text}\"\n')
                  f.write(f'Time: {start_time:.2f}s - {end_time:.2f}s (Duration: {duration:.2f}s)\n')
                  f.write('-' * 40 + '\n')

          # Also create a simple format file for easy parsing
          with open('Transcript/timestamps.txt', 'w', encoding='utf-8') as f:
              matches = find_matching_segments(result.get('segments', []), target_sentence)
              if matches and matches[0]['contains_target']:
                  best_match = matches[0]['segment']
                  f.write(f'{best_match.get(\"start\", 0):.2f},{best_match.get(\"end\", 0):.2f}\n')
                  print(f'FOUND TARGET SENTENCE: {best_match.get(\"start\", 0):.2f}s - {best_match.get(\"end\", 0):.2f}s')
              else:
                  f.write('0.00,0.00\n')
                  print('Target sentence not found with high confidence')

          print('Sentence-level transcription completed successfully!')
          print('Check Transcript/t1.txt for detailed results')
          print('Check Transcript/timestamps.txt for simple timestamp format')
          "

      # 6) Commit and push the generated transcription files back to the repo
      - name: Commit transcription files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Transcript/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m 'Add sentence-level transcription with target phrase timestamps'
            git push
          fi
