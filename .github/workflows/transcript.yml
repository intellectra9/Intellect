name: Transcript

on:
  workflow_run:
    workflows: ["Voiceover"]  # This matches the workflow name exactly
    types:
      - completed
  workflow_dispatch:  # Allow manual trigger

jobs:
  transcribe:
    runs-on: ubuntu-latest
    
    # Only run if the triggering workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    
    # Add permissions for GITHUB_TOKEN
    permissions:
      contents: write
      actions: read

    steps:
      # 1) Checkout your repo with token and pull latest changes
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2) Pull latest changes to avoid conflicts
      - name: Pull latest changes
        run: |
          git config --local user.name "intellectra9"
          git config --local user.email "intellectra9@outlook.com"
          git pull origin main --rebase || git pull origin main

      # 3) Install ffmpeg (required for WhisperX)
      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      # 4) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 5) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/openai/whisper.git
          pip install git+https://github.com/m-bain/whisperx.git
          pip install torch

      # 6) Run WhisperX word-level transcription for the entire audio
      - name: Transcribe entire audio with WhisperX word-level timestamps
        run: |
          python -c "
          import whisperx
          import os
          import json

          device = 'cpu'
          compute_type = 'float32'
          batch_size = 16
          audio_file = 'Audio/a1.mp3'

          print('Loading WhisperX model...')
          model = whisperx.load_model('base', device, compute_type=compute_type, language='en')

          print('Loading audio...')
          audio = whisperx.load_audio(audio_file, sr=16000)

          print('Transcribing audio...')
          result = model.transcribe(audio, batch_size=batch_size)
          print('Initial transcription completed')

          print('Loading alignment model...')
          model_a, metadata = whisperx.load_align_model(language_code=result['language'], device=device)

          print('Aligning for word-level timestamps...')
          result = whisperx.align(result['segments'], model_a, metadata, audio, device, return_char_alignments=False)
          print('Word-level alignment completed')

          # Create Trans folder as specified (remove existing files first)
          os.makedirs('Trans', exist_ok=True)
          
          # Remove existing files if they exist
          files_to_replace = ['Trans/t1.txt', 'Trans/timestamps.txt', 'Trans/transcription.json']
          for file_path in files_to_replace:
              if os.path.exists(file_path):
                  os.remove(file_path)
                  print(f'Removed existing file: {file_path}')

          # Write detailed results to text file
          with open('Trans/t1.txt', 'w', encoding='utf-8') as f:
              f.write('WhisperX FULL Word-Level Transcription Results\\n')
              f.write('=' * 60 + '\\n\\n')

              for i, segment in enumerate(result['segments']):
                  segment_text = segment.get('text', '').strip()
                  segment_start = segment.get('start', 0)
                  segment_end = segment.get('end', 0)

                  f.write(f'SEGMENT {i+1}: [{segment_start:.2f}s - {segment_end:.2f}s]\\n')
                  f.write(f'Text: \"{segment_text}\"\\n')

                  if 'words' in segment and segment['words']:
                      f.write('Word-level timestamps:\\n')
                      for j, word in enumerate(segment['words']):
                          word_text = word.get('word', '').strip()
                          word_start = word.get('start', 0)
                          word_end = word.get('end', 0)
                          f.write(f'  {j+1:2d}. \"{word_text}\" -> {word_start:.2f}s - {word_end:.2f}s\\n')
                  f.write('\\n' + '-' * 50 + '\\n\\n')

          # Write CSV-friendly timestamps for all words
          with open('Trans/timestamps.txt', 'w', encoding='utf-8') as f:
              for segment in result['segments']:
                  if 'words' in segment and segment['words']:
                      for word in segment['words']:
                          word_text = word.get('word', '').strip()
                          word_start = word.get('start', 0)
                          word_end = word.get('end', 0)
                          f.write(f'{word_text},{word_start:.2f},{word_end:.2f}\\n')

          # Write JSON output
          with open('Trans/transcription.json', 'w', encoding='utf-8') as f:
              json.dump(result, f, indent=2, ensure_ascii=False)

          print('âœ… WhisperX transcription completed for FULL audio!')
          print('âœ… All files have been replaced with new transcription data!')
          "

      # 7) Check for changes and commit/push
      - name: Commit and push transcription files
        run: |
          # Add all changes in Trans folder
          git add Trans/
          
          # Check if there are any staged changes
          if git diff --staged --quiet; then
            echo "No changes to commit - transcription files are identical"
          else
            echo "Changes detected - committing updated transcription files"
            
            # Get current timestamp
            timestamp=$(TZ="Asia/Kolkata" date +"%Y-%m-%d %H:%M:%S IST")
            
            # Commit with descriptive message
            git commit -m "ðŸ”„ Update WhisperX word-level transcription: ${timestamp}

            - Replaced existing transcription files with new analysis
            - Generated word-level timestamps for full audio
            - Updated t1.txt, timestamps.txt, and transcription.json
            - Auto-generated by GitHub Actions"
            
            # Pull again before pushing to handle any new changes
            echo "Pulling latest changes before push..."
            git pull origin main --rebase || {
              echo "Rebase failed, trying regular pull..."
              git pull origin main --strategy-option=ours
            }
            
            # Push the changes
            echo "Pushing changes to repository..."
            git push origin main
            
            echo "âœ… Successfully updated and pushed transcription files!"
          fi
