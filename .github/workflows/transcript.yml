name: Word-Level Transcription

on:
  push:
    branches:
      - main

jobs:
  transcribe:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Install ffmpeg (required for Whisper)
      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      # 3) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 4) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/linto-ai/whisper-timestamped torch

      # 5) Run word-level transcription inline
      - name: Transcribe audio and save word timestamps
        run: |
          python -c "
          import os
          import json
          from whisper_timestamped import load_model, transcribe

          # Load the Whisper model
          model = load_model('base')

          # Transcribe your TTS audio file with word-level timestamps enabled
          result = transcribe(model, 'Audio/a1.mp3', word_timestamps=True)

          # Debug: Print a sample of the structure
          print('Sample segment structure:')
          if result.get('segments') and len(result['segments']) > 0:
              sample_segment = result['segments'][0]
              print(json.dumps(sample_segment, indent=2, default=str))

          # Make sure 'Transcript' folder exists
          os.makedirs('Transcript', exist_ok=True)

          # Write word-level timestamps to 'Transcript/t1.txt'
          with open('Transcript/t1.txt', 'w', encoding='utf-8') as f:
              f.write('Word-Level Transcription with Timestamps\n')
              f.write('=' * 50 + '\n\n')
              
              for segment in result.get('segments', []):
                  # Check if words key exists in segment
                  if 'words' in segment and segment['words']:
                      for word_info in segment['words']:
                          if isinstance(word_info, dict):
                              # Get word text and timestamps
                              word_text = word_info.get('text', word_info.get('word', ''))
                              start_time = word_info.get('start', 0)
                              end_time = word_info.get('end', 0)
                              confidence = word_info.get('confidence', 'N/A')
                              
                              if word_text:
                                  word_text = word_text.strip()
                                  f.write(f'{word_text:<15} | {start_time:>7.2f}s - {end_time:>7.2f}s | confidence: {confidence}\n')
                  else:
                      # If no word-level data, fall back to segment level
                      segment_text = segment.get('text', '').strip()
                      start_time = segment.get('start', 0)
                      end_time = segment.get('end', 0)
                      if segment_text:
                          f.write(f'[SEGMENT] {segment_text} | {start_time:.2f}s - {end_time:.2f}s\n')

          print('Word-level transcription completed successfully!')
          print('Check Transcript/t1.txt for results')
          "

      # 6) Commit and push the generated transcription file back to the repo
      - name: Commit transcription file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Transcript/t1.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m 'Add word-level transcription for a1.mp3'
            git push
          fi
